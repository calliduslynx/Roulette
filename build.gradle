apply plugin: 'java'
apply plugin: 'eclipse'


defaultTasks 'build'
group = "de.mabe"


// ***** dependencies
dependencies {
    compile(
        'org.jogamp.jogl:jogl-all-main:2.2.0'
    )

    testCompile( 
        'junit:junit:4.11'
    )
}



// ***** make sure java 7 is used
sourceCompatibility = 1.7
targetCompatibility = 1.7

// ***** make sure UTF-8 is used
tasks.withType(Compile) { options.encoding = 'UTF-8' }

// ***** set the repositories
repositories {
    mavenCentral();
}

// ***** makes sure that tests are correctly logged
tasks.withType(Test) {
    testLogging { events 'started', 'passed'  }
}

// ***** specify source folders
sourceSets.main.java.srcDirs      'src/main/java'
sourceSets.main.resources.srcDirs 'src/main/resources', 'src/main/webapp'
sourceSets.test.java.srcDir       'src/test/java'
sourceSets.test.resources.srcDir  'src/test/resources'


// ***** creates all folders which are not exiisting
build << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}


//******************************************************************************************
//******************************************************************************************
//******************************************************************************************
// All following for eclipse



// For the Gradle Eclipse plugin
eclipse.project.file.withXml { provider ->
  ignoreDerivedResources(provider.asNode())
}
// For the Eclipse STS plugin
task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  ext.srcFile = file(".project")
  inputs.file srcFile
  outputs.dir srcFile
  onlyIf { srcFile.exists() }
  doLast {
    def projectDescription = new XmlParser().parse(srcFile)
    ignoreDerivedResources(projectDescription)
    def writer = new FileWriter(srcFile)
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(projectDescription)
  }
}
def ignoreDerivedResources(projectDescription, directories = ["build", "target", "test-output"]) {
  def count = directories.count { file(it).exists() }
  if (count > 0) {
    def filter = projectDescription
      .appendNode("filteredResources")
      .appendNode("filter")
    filter.appendNode("id", System.currentTimeMillis().toString().trim())
    filter.appendNode("type", "26")
    filter.appendNode("name")
    def matcher = filter.appendNode("matcher")
    matcher.appendNode("id", "org.eclipse.ui.ide.orFilterMatcher")
    def arguments = matcher.appendNode("arguments")
    directories.each {
      if (file(it).exists()) {
        def dirMatcher = arguments.appendNode("matcher")
        dirMatcher.appendNode("id", "org.eclipse.ui.ide.multiFilter")
        dirMatcher.appendNode("arguments", "1.0-projectRelativePath-matches-false-false-${it}")
      }
    }
  }
}
